class Solution(object):
    def fourSum(self, nums, target):
        def kSum(nums, target, k, start):
            res = []
            if start >= len(nums):
                return res
            # Early termination
            average = target / k
            if nums[start] > average or nums[-1] < average:
                return res
            if k == 2:
                return twoSum(nums, target, start)
            for i in range(start, len(nums) - k + 1):
                if i > start and nums[i] == nums[i - 1]:
                    continue  # skip duplicates
                for subset in kSum(nums, target - nums[i], k - 1, i + 1):
                    res.append([nums[i]] + subset)
            return res
        def twoSum(nums, target, start):
            res = []
            left, right = start, len(nums) - 1
            while left < right:
                curr_sum = nums[left] + nums[right]
                if curr_sum == target:
                    res.append([nums[left], nums[right]])
                    left += 1
                    right -= 1
                    while left < right and nums[left] == nums[left - 1]:
                        left += 1
                    while left < right and nums[right] == nums[right + 1]:
                        right -= 1
                elif curr_sum < target:
                    left += 1
                else:
                    right -= 1
            return res
        nums.sort()
        return kSum(nums, target, 4, 0)
